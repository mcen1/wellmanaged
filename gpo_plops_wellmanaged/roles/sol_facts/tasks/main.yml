---
- name: Run connectivity check
  include_role:
    name: connectivitycheck

- name: Check if Qualys facts missing
  shell: last qualys console -n 1
  register: qualysfact
  ignore_errors: true
  when: (not server_reachable.failed) and (not server_sudoable.failed )

- name: Set Qualys facts missing points
  block:
    - name: Deduct 10 points (Qualys facts)
      set_fact:
        score: "{{ score|int - 10 }}"
    - name: Update server summary (Qualys facts)
      set_fact:
        wmsummary: "{{ wmsummary }} QUALYS: Qualys has not logged in. [-10]|"
  when: (qualysfact.rc is defined and qualysfact.rc != 0) or qualysfact is not defined or (server_reachable.failed is defined and server_reachable.failed) or (server_sudoable.failed is defined and server_sudoable.failed)
  delegate_to: 127.0.0.1
  become: false

- name: Check if Server is beyond 90 days since last Qualys login
  shell: last qualys console | head -n 1 | awk 'BEGIN {y='`date +%Y`'}$5 == "Dec" && last != "Dec" { y-- }{ print y,$0 ; last = $5 }' | awk '{print $6" "$7" "$1}'
  register: qualysdatefact
  ignore_errors: true
  when: qualysfact.rc is defined and qualysfact.rc != 0

- name: Set Server is beyond 90 days since last Qualys login points
  block:
    - name: Deduct 10 points (Qualys 90 days)
      set_fact:
        score:  "{{ score|int - 10 }}"
    - name: Update server summary (Qualys 90 days)
      set_fact:
        wmsummary: "{{ wmsummary }} QUALYS: Server is beyond 90 days from last login from qualys user. [-10]|"
  when: (qualysdatefact is defined and qualysdatefact.stdout is defined and qualysdatefact.stdout != '  2021' and (current_date.stdout |to_datetime -  qualysdatefact.stdout| to_datetime('%b %d %Y')).days > 90) or qualysdatefact is not defined or (qualysdatefact is defined and qualysdatefact.stdout is defined and qualysdatefact.stdout == '  2021') or (server_reachable.failed is defined and server_reachable.failed) or (server_sudoable.failed is defined and server_sudoable.failed)
  delegate_to: 127.0.0.1
  become: false
  ignore_errors: true

- name: AD auth check
  shell: svcs -a|grep "ldap/client" | awk '{print $1}' | grep -i online && exit 0 || exit 1
  register: adfact
  ignore_errors: true
  when: (not server_reachable.failed) and (not server_sudoable.failed)


- name: Set AD auth check points
  block:
    - name: Deduct 10 points (AD auth)
      set_fact:
        score: "{{ score|int - 10 }}"
    - name: Update server summary (AD auth)
      set_fact:
        wmsummary: "{{ wmsummary }} AD AUTH: no valid AD processes found. [-10]|"
  when:  (adfact.failed is defined and adfact.failed) or adfact is not defined or (server_reachable.failed is defined and server_reachable.failed) or (server_sudoable.failed is defined and server_sudoable.failed)
  delegate_to: 127.0.0.1
  become: false

- name: check that sox facts file exists
  stat:
    path: /opt/wm_facts/facts.d/sox.txt
  register: soxfile
  when: (not server_reachable.failed) and (not server_sudoable.failed)


- name: Check if Server is beyond 90 days since last SOX check
  shell: grep custom_sox_rundate /opt/wm_facts/facts.d/sox.txt | cut -d '=' -f2
  register: soxdatefact
  ignore_errors: true
  become: true
  when: (soxfile.stat is defined and soxfile.stat.exists) and (not server_reachable.failed) and (not server_sudoable.failed)


- name: Set Server is beyond 90 days since last SOX check points
  block:
    - name: Deduct 10 points (SOX 90 days)
      set_fact:
        score:  "{{ score|int - 10 }}"
    - name: Update server summary (SOX 90 days)
      set_fact:
        wmsummary: "{{ wmsummary }} SOX: Server is beyond 90 days from last run. [-10]|"
  when: ((soxfile.stat is defined and soxfile.stat.exists) and (soxdatefact.stdout is defined and soxdatefact.stdout != "" and (current_date.stdout |to_datetime -  soxdatefact.stdout| to_datetime('%b %d %Y')).days > 90)) or (soxfile.stat is defined and not soxfile.stat.exists) or (server_reachable.failed is defined and server_reachable.failed) or (server_sudoable.failed is defined and server_sudoable.failed)
  delegate_to: 127.0.0.1
  become: false

- name: Check for SOX Errors
  shell: cat /opt/wm_facts/facts.d/sox.txt | egrep -e "=101|=103" && exit 101 || exit 0
  register: soxerrorsfact
  failed_when: soxerrorsfact.rc !=0 and soxerrorsfact.rc != 101
  ignore_errors: true
  become: true
  when: (not server_reachable.failed ) and (not server_sudoable.failed) and soxfile.stat is defined and soxfile.stat.exists 

- name: Set SOX errors points
  block:
    - name: Deduct 10 points (SOX errors)
      set_fact:
        score: "{{ score|int - 10 }}"
    - name: Update server summary (SOX errors)
      set_fact:
        wmsummary: "{{ wmsummary }} SOX: SOX report facts failing: {{ soxerrorsfact.stdout }}. [-10]|"
  when: soxfile.stat is defined and (soxfile.stat.exists and (soxerrorsfact is defined and soxerrorsfact.rc == 101))
  delegate_to: 127.0.0.1
  become: false

- name: Set SOX report missing points
  block:
    - name: Deduct 10 points (SOX report missing)
      set_fact:
        score: "{{ score|int - 10 }}"
    - name: Update server summary (SOX report missing)
      set_fact:
        wmsummary: "{{ wmsummary }} SOX: SOX report facts missing or failing. [-10]|"
  when: (soxfile.stat is defined and not soxfile.stat.exists) or (server_reachable.failed is defined and server_reachable.failed) or (server_sudoable.failed is defined and server_sudoable.failed)
  delegate_to: 127.0.0.1
  become: false

- name: Check for Log aggregation
  shell: cat /etc/syslog.conf | grep 10.20.58.168
  register: logaggfact
  ignore_errors: true
  become: true
  when: (server_reachable.failed is defined and not server_reachable.failed) and (server_sudoable.failed is defined and not server_sudoable.failed)

- name: Set Log Aggregation points
  block:
    - name: Deduct 5 points (No log Aggregation)
      set_fact:
        score: "{{ score|int - 5 }}"
    - name: Update server summary (No log Aggregation)
      set_fact:
        wmsummary: "{{ wmsummary }} LOGGING: Log Aggregation to splunk is missing. [-5]|"
  when: (logaggfact.failed is defined and logaggfact.failed == true) or (server_reachable.failed is defined and server_reachable.failed) or (server_sudoable.failed is defined and server_sudoable.failed)
  delegate_to: 127.0.0.1
  become: false
